#/usr/bin/python3

'''
This is a python script which inputs a pcap file generated by dpdk_snoop_app.
This script generates a json output of the input pcap file.
The json output consists of the information of each packets of pcap file.
'''

import pyshark
import sys
from scapy.all import *
import pandas as pd
import json
import pathlib

# Validation checking for input file
FILE_EXT=pathlib.Path(sys.argv[1]).suffix
if FILE_EXT != '.pcap':
    exit("The argument should always be a pcap file")

cap = pyshark.FileCapture(sys.argv[1])

#for pkt in cap:

hl=[]
tl=[]
l=[]
sp=[]
dp=[]
sr=[]
dt=[]
T=[]

# Extract IP addresses and ports
for pkt in cap:
    hl.append(pkt.highest_layer)
    l.append(len(pkt)) # Extract packet size
    try:
        sp.append(pkt[pkt.transport_layer].srcport)
    except:
        sp.append('0')
    try:
        dp.append(pkt[pkt.transport_layer].dstport)
    except:
        dp.append('0')

for pkt in cap:
    if 'ip' in dir(pkt):
        sr.append(pkt.ip.src)
        dt.append(pkt.ip.dst)
    else:
        sr.append(pkt.ipv6.src)
        dt.append(pkt.ipv6.dst)

# Extract Timestamp of TCP packets
packets = rdpcap(sys.argv[1])
for packet in packets:
    if TCP in packet:  #  ignore packets without TCP payload
        for opt, val in packet[TCP].options:  #  consider all TCP options
            if opt == 'Timestamp':
                TSval, TSecr = val  #  decode the value of the option
                T.append(TSval)
    else:
        T.append(' ')

# Generate json output
All=list(zip(l,sr,sp,dt,dp,T))
df=pd.DataFrame(All,columns=['LENGTH','SOURCE-IP','SOURCE-PORT','DESTINATION-IP','DESTINATION-PORT','TIMESTAMP'])
df1=df.to_markdown(index=False)
#print(df1)
out=df.to_json(orient = "records")
print(out)
